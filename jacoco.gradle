apply plugin: 'jacoco'

jacoco {
    toolVersion = "0.8.5"
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
}

def fileFilter = [
        '**/R.class',
        '**/R$*.class',
        '**/BuildConfig.*',
        '**/Manifest*.*',
        '**/*Test*.*',
        '**/android/databinding/*',
        '**/androidx/databinding/*',
        '**/di/*',
        '**/*Args*.class',
        '**/*Directions*.class',
        '**/*NavArgsLazy.*',
        '**/*FragmentArgs.*',
        '**/*ViewModelLazy.*',
        '**/*MapperImpl*.*',
        '**/*$ViewInjector*.*',
        '**/*$ViewBinder*.*',
        '**/BuildConfig.*',
        '**/*Component*.*',
        '**/*BR*.*',
        '**/*Creator.class',
        '**/Manifest*.*',
        '**/*$Lambda$*.*',
        '**/*Companion*.*',
        '**/*Module.*',
        '**/*Dagger*.*',
        '**/*MembersInjector*.*',
        '**/*_Factory*.*',
        '**/*_Provide*Factory*.*',
        '**/*Extensions*.*',
        '**/*$Result.*', /* filtering `sealed` and `data` classes */
        '**/*$Result$*.*'/* filtering `sealed` and `data` classes */
]

def mainSrc = "${project.rootDir}/app/src/main/java"

task jacocoTestDebugReport(type: JacocoReport, dependsOn: ['testDebugUnitTest']) {
    reports {
        xml.enabled = true
        html.enabled = true
    }

    def debugTree = [
            fileTree(dir: "${buildDir}/tmp/kotlin-classes/debug", excludes: fileFilter)
    ]

    sourceDirectories.setFrom(files([mainSrc]))
    classDirectories.setFrom(files([debugTree]))
    executionData.setFrom(fileTree(dir: "${project.buildDir}", includes: [
            "jacoco/testDebugUnitTest.exec",
            "outputs/code-coverage/connected/*coverage.ec",
            "outputs/code_coverage/debugAndroidTest/connected/*coverage.ec"
    ]))

}
